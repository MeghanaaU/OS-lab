#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

typedef struct {
    int id;
    int period;
    int execution;
    int remaining;
} Task;

void executeTask(Task *task) {
    printf("Executing Task %d\n", task->id);
    sleep(task->execution);
}

void rateMonotonicScheduling(Task tasks[], int n) {
    int time = 0;
    while (1) {

        Task *highestPriorityTask = NULL;
        for (int i = 0; i < n; i++) {
            if (tasks[i].remaining == 0) {
                if (highestPriorityTask == NULL || tasks[i].period < highestPriorityTask->period) {
                    highestPriorityTask = &tasks[i];
                }
            }
        }

        if (highestPriorityTask != NULL) {

            executeTask(highestPriorityTask);


            highestPriorityTask->remaining = highestPriorityTask->period;
        }


        for (int i = 0; i < n; i++) {
            if (tasks[i].remaining > 0) {
                tasks[i].remaining--;
            }
        }

        time++;
        printf("Time: %d\n", time);
        sleep(1);
    }
}

int main() {
    int n;


    printf("Enter the number of tasks: ");
    scanf("%d", &n);


    Task *tasks = (Task *)malloc(n * sizeof(Task));

    if (tasks == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }


    for (int i = 0; i < n; i++) {
        tasks[i].id = i + 1;
        printf("\nEnter details for Task %d:\n", i + 1);
        printf("Period: ");
        scanf("%d", &tasks[i].period);
        printf("Execution time: ");
        scanf("%d", &tasks[i].execution);
        tasks[i].remaining = 0;
    }

    printf("\nRate Monotonic Scheduling Simulation\n");
    rateMonotonicScheduling(tasks, n);


    free(tasks);

    return 0;
}
