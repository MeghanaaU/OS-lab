#include <stdio.h>
#include <stdbool.h>

#define MAX_P 10
#define MAX_R 10

int main() {
    int n, m;
    int alloc[MAX_P][MAX_R], max[MAX_P][MAX_R], need[MAX_P][MAX_R];
    int avail[MAX_R];
    int request[MAX_R], pid;
    int finish[MAX_P] = {0}, safeSeq[MAX_P], work[MAX_R];

    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    for (int i = 0; i < n; i++) {
        printf("Enter details for P%d\n", i);
        printf("Enter allocation: ");
        for (int j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);
        printf("Enter Max: ");
        for (int j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
    }


    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    printf("Enter Available Resources: ");
    for (int i = 0; i < m; i++)
        scanf("%d", &avail[i]);


    for (int i = 0; i < m; i++)
        work[i] = avail[i];


    printf("Enter New Request Details --\n");
    printf("Enter pid: ");
    scanf("%d", &pid);
    printf("Enter Request for Resources: ");
    for (int i = 0; i < m; i++)
        scanf("%d", &request[i]);


    bool canGrant = true;
    for (int i = 0; i < m; i++) {
        if (request[i] > need[pid][i] || request[i] > avail[i]) {
            canGrant = false;
            break;
        }
    }

    if (!canGrant) {
        printf("Request can't be granted. System may go into unsafe state.\n");
        return 0;
    }


    for (int i = 0; i < m; i++) {
        avail[i] -= request[i];
        alloc[pid][i] += request[i];
        need[pid][i] -= request[i];
        work[i] = avail[i];
    }


    int count = 0;
    while (count < n) {
        bool found = false;
        for (int p = 0; p < n; p++) {
            if (!finish[p]) {
                bool canFinish = true;
                for (int r = 0; r < m; r++) {
                    if (need[p][r] > work[r]) {
                        canFinish = false;
                        break;
                    }
                }
                if (canFinish) {
                    for (int r = 0; r < m; r++)
                        work[r] += alloc[p][r];
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    printf("P%d is visited(", p);
                    for (int r = 0; r < m; r++)
                        printf(" %d", work[r]);
                    printf(" )\n");
                    found = true;
                }
            }
        }
        if (!found) break;
    }

    if (count == n) {
        printf("SYSTEM IS IN SAFE STATE\nThe Safe Sequence is -- ( ");
        for (int i = 0; i < n; i++)
            printf("P%d ", safeSeq[i]);
        printf(")\n");
    } else {
        printf("SYSTEM IS NOT IN SAFE STATE\n");
    }

    printf("\nProcess\tAllocation\tMax\tNeed\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t", i);
        for (int j = 0; j < m; j++)
            printf("%d ", alloc[i][j]);
        printf("\t\t");
        for (int j = 0; j < m; j++)
            printf("%d ", max[i][j]);
        printf("\t");
        for (int j = 0; j < m; j++)
            printf("%d ", need[i][j]);
        printf("\n");
    }

    return 0;
}
